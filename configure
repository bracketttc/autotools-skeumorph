#!/usr/bin/env python3

"""
Autotools-skeumorphic configure script for CMake projects
"""

import argparse
import pathlib
import subprocess
import sys


def get_parser():
    """
    Create the argument parser.
    """
    parser = argparse.ArgumentParser()
    build_types = parser.add_argument_group(
        "Build Types"
    ).add_mutually_exclusive_group()
    build_types.add_argument(
        "--debug",
        action="append_const",
        const="-DCMAKE_BUILD_TYPE:String=Debug",
        dest="cmake_args",
    )
    build_types.add_argument(
        "--release",
        action="append_const",
        const="-DCMAKE_BUILD_TYPE:String=Release",
        dest="cmake_args",
    )
    build_types.add_argument(
        "--relwithdbginfo",
        action="append_const",
        const="-DCMAKE_BUILD_TYPE:String=RelWithDbgInfo",
        dest="cmake_args",
    )
    build_types.add_argument(
        "--minsizerel",
        action="append_const",
        const="-DCMAKE_BUILD_TYPE:String=MinSizeRel",
        dest="cmake_args",
    )

    build_options = parser.add_argument_group("Build options")
    build_options.add_argument(
        "--shared",
        action="append_const",
        const="-DBUILD_SHARED_LIBS:Boolean=ON",
        dest="cmake_args",
        help="Build libraries as SHARED if a type is not explicitly declared",
    )
    return parser


def main():
    """
    Script entry point.
    """
    args = get_parser().parse_args()
    command = ["cmake", ".."]
    if args.cmake_args:
        command += args.cmake_args

    builddir = pathlib.Path("./build")
    builddir.mkdir(exist_ok=True)

    try:
        subprocess.run(command, cwd=builddir, check=True)
    except subprocess.CalledProcessError as e:
        sys.exit(e.returncode)


if __name__ == "__main__":
    main()
